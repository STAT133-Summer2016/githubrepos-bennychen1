ggplot(Japan_df,aes(dmy(const_start),name_factors,color=Type))  + scale_y_discrete(labels=c(to_label)) + scale_x_date(limits=ymd(c("1958-01-01","2010-01-01")),date_breaks="5 years",date_minor_breaks = "2 years",labels=date_format("%Y")) + geom_segment(aes(x=dmy(const_start),y=name,xend=dmy(op_start),yend=name))  + labs(title="Construction Times For \n Japanese Nuclear Reactors",x="Date",y="Reactor Site")
iowa <- read_csv("C:/test/Iowa_Liquor_Sales.csv")
library(readr)
iowa <- read_csv("C:/test/Iowa_Liquor_Sales.csv")
View(iowa)
load("C:/Statistics133/labs6/evaluator.rda")
my_data
library(readxl)
arrivals <- read_excel("~/Documents/Stat135/gamma-arrivals.xlsx")
arrivals <- read_excel("~/Documents/Stat135/gamma-arrivals.xls")
arrivals <- read_excel("/~/Documents/Stat135/gamma-arrivals.xls")
setwd("~/Documents/Stat135/")
setwd("~/Documents/Stat135")
setwd("~/Documents")
setwd("Documents")
getwd()
arrivals <- read_excel("Stat135/gamma-arrivals.xls")
arrivals <- arrivals$Col1
xlab="Interarrival times")
hist(arrivals, freq=F,
main="Interarrival times of photons (n=3935)",
xlab="Interarrival times")
x1 <- mean(arrivals)
x2 <- mean(arrivals^2)
n <- length(arrivals)
denom <- x2 - x1^2
denom
mom_alpha <- x1^2/denom
mom_lambda <- x1/denom
mom_est <- c(mom_alpha,mom_lambda)
mom_est
install.packages("MASS")
library(MASS)
mle_est <- fitdistr(arrivals,"gamma")
mle_est <- fitdistr(arrivals,"gamma")
mle_esst
mle_est
?fitdistr
mle_est <- fitdistr(arrivals,"gamma")$estimate
mle_est
mle_alpha <- mle_est[1]
library(readxl)
arrivals <- read_excel("Stat135/gamma-arrivals.xls")
arrivals <- arrivals$Col1
hist(arrivals, freq=F,
main="Interarrival times of photons (n=3935)",
xlab="Interarrival times")
x1 <- mean(arrivals)
x2 <- mean(arrivals^2)
n <- length(arrivals)
denom <- x2 - x1^2
denom
mom_alpha <- x1^2/denom
mom_lambda <- x1/denom
mom_est <- c(mom_alpha,mom_lambda)
mom_est
library(MASS)
mle_est <- fitdistr(arrivals,"gamma")$estimate
mle_est
mle_alpha <- mle_est[1]
mle_lambda <- mle_est[2]
mom_mle_est <- rbind(mom_est,mle_est)
mom_mle_est
hist(arrivals, freq=F,
main="Interarrival times of photons (n=3935)",
xlab="Interarrival times",
ylim=c(0,0.013))
curve(dgamma(x,shape = mom_alpha, rate = mom_lambda, add = T, col = "red",lwd = 2))
hist(arrivals, freq=F,
main="Interarrival times of photons (n=3935)",
xlab="Interarrival times",
ylim=c(0,0.013))
curve(dgamma(x,shape = mom_alpha, rate = mom_lambda), add = T, col = "red",lwd = 2))
hist(arrivals, freq=F,
main="Interarrival times of photons (n=3935)",
xlab="Interarrival times",
ylim=c(0,0.013))
curve(dgamma(x,shape = mom_alpha, rate = mom_lambda), add = T, col = "red",lwd = 2)
legend("topright",c("MLE"), lty = 1,lwd=2.5,col=c("blue"))
legend("topright",c("MLE"), lty = 1,lwd=2.5,col=c("red"))
boot_mom_sampl1 <- replicate(500,rgamma(n,shape = mom_alpha,
rate = mom_lambda))
boot_mle_sampl1 <- replicate(500,rgamma(n,shape = mle_alpha,
rate = mle_lambda))
boot_mom_sampl1 <- replicate(500,rgamma(n,shape = mom_alpha,
rate = mom_lambda))
boot_mle_sampl1 <- replicate(500,rgamma(n,shape = mle_alpha,
rate = mle_lambda))
boot_mom <- apply(boot_mom_sampl1, 2,function(x) (fitdistr(x,"gamma")$estimate))
boot_mles <- apply(boot_mle_sampl1,2,function(x) (fitdistr(x,"gamma")$estimate))
est_SE <- matrix(c(sd(boot_mom_sampl1[1,]),sd(boot_mom_sampl1[2,])),
c(sd(boot_mles[1,]), sd(boot_mles[2,])),
nrow = 2, ncol = 2, byrow= T,
dimnames = list(c("MOM","MLE"),c("Est.SE alpha","Est.SE lambda"))
est_SE <- matrix(c(sd(boot_mom_sampl1[1,]),sd(boot_mom_sampl1[2,])),
c(sd(boot_mles[1,]), sd(boot_mles[2,])),
nrow = 2, ncol = 2, byrow= T,
dimnames = list(c("MOM","MLE"),c("Est.SE alpha","Est.SE lambda")))
library(scales)
shiny::runApp('C:/stat133-su2016/20-lesson/examples/001-histogram')
install.packages("Shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('C:/stat133-su2016/20-lesson/examples/001-histogram')
library(dplyr)
install.packages("dplyr")
runApp('C:/stat133-su2016/20-lesson/examples/001-histogram')
runApp('C:/Statistics133/labs6')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/stat133-su2016/20-lesson/examples/007-widgets')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/stat133-su2016/20-lesson/examples/009-upload')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/stat133-su2016/20-lesson/examples/009-upload')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/stat133-su2016/20-lesson/examples/009-upload')
runApp('C:/stat133-su2016/20-lesson/examples/009-upload')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/stat133-su2016/20-lesson/examples/009-upload')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/stat133-su2016/20-lesson/examples/007-widgets')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
library(shiny)
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/stat133-su2016/20-lesson/examples/005-sliders')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/stat133-su2016/20-lesson/examples/005-sliders')
runApp('C:/stat133-su2016/20-lesson/examples/005-sliders')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Statistics133/labs6/my_first_app')
runApp('C:/Users/BennyPC/Downloads')
runApp('C:/Users/BennyPC/Downloads')
library(readr)
count <- read_csv("C:/Statistics/133/UGApplicantCounts-Applicants")
count <- read_csv("C:/Statistics/133/final_project/UGApplicantCounts-Applicants")
count <- read_csv("C:/Statistics133/final_project/UGApplicantCounts-Applicants")
count <- read_csv("C:/Statistics133/final_project/UGApplicantCounts-Applicants.csv")
View(counts)
View(count)
ACT <- read_csv("C:/Statistics133/final_project/ACTPercentiles-Admitted.csv")
count <- read_csv("C:/Statistics133/final_project/UGApplicantCounts-Applicants.csv")
SAT <- read_csv("C:/Statistics133/final_project/SATPercentiles-Admitted.csv")
GPA <- read_csv("C:/Statistics133/final_project/HighSchoolGPAs-Admitted.csv")
View(count)
View(SAT)
View(GPA)
knitr::opts_chunk$set(echo = TRUE)
# libraries go here
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(stringr)
# Your cleaning code.
QandA <- load("question_data.Rdata")
lingdata <- read_delim("lingdata.txt", " " )
linglocation <- read_delim("linglocation.txt", " ")
questions <- quest.mat %>%
mutate(quest = str_replace_all(quest, "<[/]?u>", ""),
quest = str_replace_all(quest, "<[/]?i>", "")) %>%
filter(qnum >= 50 & qnum <= 121)
linglocation <- linglocation %>%
gather(Question, number_responses, -c(Cell, `Number of people in cell`, Latitude,
Longitude))
v_num <- str_c("V", c(4:488))
answers <- do.call(rbind, all.ans) %>%
filter(qnum >= 50 & qnum <= 121) %>%
mutate(code = v_num)
# Your cleaning code.
QandA <- load("question_data.Rdata")
lingdata <- read_delim("lingdata.txt", " " )
linglocation <- read_delim("linglocation.txt", " ")
questions <- quest.mat %>%
mutate(quest = str_replace_all(quest, "<[/]?u>", ""),
quest = str_replace_all(quest, "<[/]?i>", "")) %>%
filter(qnum >= 50 & qnum <= 121)
linglocation <- linglocation %>%
gather(Question, number_responses, -c(Cell, `Number of people in cell`, Latitude,
Longitude))
v_num <- str_c("V", c(4:488))
answers <- do.call(rbind, answers) %>%
filter(qnum >= 50 & qnum <= 121) %>%
mutate(code = v_num)
QandA <- load("question_data.Rdata")
lingdata <- read_delim("lingdata.txt", " " )
linglocation <- read_delim("linglocation.txt", " ")
lingdata <- lingdata %>%
gather(Question, Response, -c(ID, CITY, STATE, ZIP, lat, long)) %>%
mutate(Question = str_replace_all(Question, "Q[0]?", ""))
questions <- quest.mat %>%
filter(qnum  %in% lingdata$Question) %>%
mutate(quest = str_replace_all(quest, "<[/]?[^>]>", ""))
add_number <- function(i) {
mutate(all.ans[[i]], Response = c(1:nrow(all.ans[[i]])))
}
answers <- lapply(1:length(all.ans), add_number)
answers <- data.frame(do.call(rbind, answers)) %>%
filter(qnum %in% as.integer(lingdata$Question))
knitr::opts_chunk$set(echo = TRUE)
# libraries go here
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(stringr)
# Your cleaning code.
QandA <- load("question_data.Rdata")
lingdata <- read_delim("lingdata.txt", " " )
linglocation <- read_delim("linglocation.txt", " ")
lingdata <- lingdata %>%
gather(Question, Response, -c(ID, CITY, STATE, ZIP, lat, long)) %>%
mutate(Question = str_replace_all(Question, "Q[0]?", ""))
questions <- quest.mat %>%
filter(qnum  %in% lingdata$Question) %>%
mutate(quest = str_replace_all(quest, "<[/]?[^>]>", ""))
add_number <- function(i) {
mutate(all.ans[[i]], Response = c(1:nrow(all.ans[[i]])))
}
answers <- lapply(1:length(all.ans), add_number)
answers <- data.frame(do.call(rbind, answers)) %>%
filter(qnum %in% as.integer(lingdata$Question))
QandA <- load("question_data.Rdata")
knitr::opts_chunk$set(echo = TRUE)
# libraries go here
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(stringr)
# Your cleaning code.
QandA <- load("question_data.Rdata")
lingdata <- read_delim("lingdata.txt", " " )
linglocation <- read_delim("linglocation.txt", " ")
lingdata <- lingdata %>%
gather(Question, Response, -c(ID, CITY, STATE, ZIP, lat, long)) %>%
mutate(Question = str_replace_all(Question, "Q[0]?", ""))
questions <- quest.mat %>%
filter(qnum  %in% lingdata$Question) %>%
mutate(quest = str_replace_all(quest, "<[/]?[^>]>", ""))
add_number <- function(i) {
mutate(all.ans[[i]], Response = c(1:nrow(all.ans[[i]])))
}
answers <- lapply(1:length(all.ans), add_number)
answers <- data.frame(do.call(rbind, answers)) %>%
filter(qnum %in% as.integer(lingdata$Question))
knitr::opts_chunk$set(echo = TRUE)
# libraries go here
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(stringr)
?qf
qf(0.95, 9, 9)
type_I <- c(3.03, 5.53, 5.60, 9.30, 9.92, 12.51, 12.95, 15.21, 16.04, 16.84)
type_II <- c(3.19, 4.26, 4.47, 4.53, 4.67, 4.69, 12.78, 6.79, 9.37, 12.75)
var.test(type_I, type_II)
knitr::opts_chunk$set(echo = TRUE)
# libraries go here
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(stringr)
library(scales)
?unite
questiondata <- load("question_data.Rdata")
linglocation <- read_delim("linglocation.txt", " ") %>%
gather(Answer, Responses, -c(Cell, `Number of people in cell`,
Latitude, Longitude)) #Gather Answers into one column
lingdata <- read_delim("lingdata.txt", " ") %>%
select(-c(ID, CITY, ZIP, lat, long)) %>%      #Don't need these
gather(qnum, answer, -STATE) %>%
mutate(qnum = str_replace_all(qnum, "Q[0]?", ""),
qnum = as.integer(qnum))       #Integer because qnum in others are integers.
questions <- quest.use
ans_number <- function(i) {
# Add a column that assigns numbers to each dataframe.
# Args
## i = numeric, element of list
mutate(all.ans[[i]], response = 1:nrow(all.ans[[i]]))
}
answer_list <- lapply(1:length(all.ans), ans_number)  #Assign numbers to each answer
answers <- do.call(rbind, answer_list) %>%
filter(qnum %in% questions$qnum) %>%  #Questions 50 - 121
select(-c(ans.let, per))              #Do not need
usa_states <- rownames(USArrests) %>%
str_to_lower()
names(usa_states) <- state.abb
states <- map_data("state") %>%
select(-c(order, subregion))
wrap_60 <- wrap_format(60)
wrap_120 <- wrap_format(120)
qa <- inner_join(questions, answers) %>%
inner_join(lingdata, ., by = c("answer" = "response", "qnum" = "qnum")) %>%
select(-answer) %>%
group_by(STATE, qnum, quest, ans) %>%
tally %>%                    # Count occurence of each answer
group_by(STATE, quest) %>%
filter(STATE %in% state.abb,
n == max(n)) %>%       #For each state, each question keep more frequent ans
ungroup() %>%
mutate(STATE = str_replace_all(STATE, usa_states), # Abbreviations to long for join
ans = wrap_60(as.character(ans)),
quest = wrap_120(quest)) %>%
mutate(ans=paste(ans, sep = "", collapse = "/"))
filter(STATE != "alaska")
setwd("C:/Statistics133/hw7")
questiondata <- load("question_data.Rdata")
linglocation <- read_delim("linglocation.txt", " ") %>%
gather(Answer, Responses, -c(Cell, `Number of people in cell`,
Latitude, Longitude)) #Gather Answers into one column
lingdata <- read_delim("lingdata.txt", " ") %>%
select(-c(ID, CITY, ZIP, lat, long)) %>%      #Don't need these
gather(qnum, answer, -STATE) %>%
mutate(qnum = str_replace_all(qnum, "Q[0]?", ""),
qnum = as.integer(qnum))       #Integer because qnum in others are integers.
questions <- quest.use
ans_number <- function(i) {
# Add a column that assigns numbers to each dataframe.
# Args
## i = numeric, element of list
mutate(all.ans[[i]], response = 1:nrow(all.ans[[i]]))
}
answer_list <- lapply(1:length(all.ans), ans_number)  #Assign numbers to each answer
answers <- do.call(rbind, answer_list) %>%
filter(qnum %in% questions$qnum) %>%  #Questions 50 - 121
select(-c(ans.let, per))              #Do not need
usa_states <- rownames(USArrests) %>%
str_to_lower()
names(usa_states) <- state.abb
states <- map_data("state") %>%
select(-c(order, subregion))
wrap_60 <- wrap_format(60)
wrap_120 <- wrap_format(120)
qa <- inner_join(questions, answers) %>%
inner_join(lingdata, ., by = c("answer" = "response", "qnum" = "qnum")) %>%
select(-answer) %>%
group_by(STATE, qnum, quest, ans) %>%
tally %>%                    # Count occurence of each answer
group_by(STATE, quest) %>%
filter(STATE %in% state.abb,
n == max(n)) %>%       #For each state, each question keep more frequent ans
ungroup() %>%
mutate(STATE = str_replace_all(STATE, usa_states), # Abbreviations to long for join
ans = wrap_60(as.character(ans)),
quest = wrap_120(quest)) %>%
mutate(ans=paste(ans, sep = "", collapse = "/"))
filter(STATE != "alaska")
qa <- inner_join(questions, answers) %>%
inner_join(lingdata, ., by = c("answer" = "response", "qnum" = "qnum")) %>%
select(-answer) %>%
group_by(STATE, qnum, quest, ans) %>%
tally %>%                    # Count occurence of each answer
group_by(STATE, quest) %>%
filter(STATE %in% state.abb,
n == max(n)) %>%       #For each state, each question keep more frequent ans
ungroup() %>%
mutate(STATE = str_replace_all(STATE, usa_states), # Abbreviations to long for join
ans = wrap_60(as.character(ans)),
quest = wrap_120(quest)) %>%
mutate(ans=paste(ans, sep = "", collapse = "/")) %>%
filter(STATE != "alaska")
View(qa)
qa <- inner_join(questions, answers) %>%
inner_join(lingdata, ., by = c("answer" = "response", "qnum" = "qnum")) %>%
select(-answer) %>%
group_by(STATE, qnum, quest, ans) %>%
tally %>%                    # Count occurence of each answer
group_by(STATE, quest) %>%
filter(STATE %in% state.abb,
n == max(n)) %>% #For each state, each question keep more frequent ans
mutate(ans=paste(ans, sep = "", collapse = "/")) %>%
ungroup() %>%
mutate(STATE = str_replace_all(STATE, usa_states), # Abbreviations to long for join
ans = wrap_60(as.character(ans)),
quest = wrap_120(quest)) %>%
filter(STATE != "alaska")
View(qa)
qa <- inner_join(questions, answers) %>%
inner_join(lingdata, ., by = c("answer" = "response", "qnum" = "qnum")) %>%
select(-answer) %>%
group_by(STATE, qnum, quest, ans) %>%
tally %>%                    # Count occurence of each answer
group_by(STATE, quest) %>%
filter(STATE %in% state.abb,
n == max(n)) %>% #For each state, each question keep more frequent ans
mutate(ans=paste(ans, sep = "", collapse = "/")) %>%
ungroup() %>%
mutate(STATE = str_replace_all(STATE, usa_states), # Abbreviations to long for join
ans = wrap_60(as.character(ans)),
quest = wrap_120(quest)) %>%
filter(STATE != "alaska")               # Continental US.
write_csv(qa, "HW7App/qa.csv")
shiny::runApp('HW7App')
runApp('HW7App')
View(qa)
View(states)
x <- filter(qa, STATE == "west virginia")
View(x)
x$STATE
x$STATE %in% states$region
View(inner_join(x, states, by = c("STATE" = "region")))
runApp('HW7App')
library(rsconnect)
setwd("HW7App")
rsconnect::setAccountInfo(name='drkatz', token='9719490568298676C7A49194C3932D1D', secret='E0fd4V8kUY3lQeMyaQgenrkCttzNI7cM6jDLdBq+')
deployApp()
View(states)
ggplot(qa51) +
grom_polygon(data = states, aes(x = long, y = lat), fill = "white", color = "black") +
geom_point(aes(x = Longitude, y = Latitude, fill = ans,
size = Responses), shape = 21,
color = "black", alpha = 0.3) +
scale_x_continuous(limits = c(-130, -55)) +
scale_y_continuous(limits = c(20, 55)) +
scale_size_continuous(range = c(1,15)) +
coord_fixed(1.3) +
ggtitle(questions$quest[2]) +
guides(size = FALSE) +
labs(fill = "Answer")
qa50 <- filter(answers, qnum == 50) %>%
mutate(response = response + 3,
response = str_c("V", response)) %>%
inner_join(linglocation, ., by = c("Answer" = "response"))
qa51 <- filter(answers, qnum == 51) %>%
mutate(response = response + 3,
response = str_c("V", response)) %>%
inner_join(linglocation, ., by = c("Answer" = "response"))
ggplot(qa51) +
grom_polygon(data = states, aes(x = long, y = lat), fill = "white", color = "black") +
geom_point(aes(x = Longitude, y = Latitude, fill = ans,
size = Responses), shape = 21,
color = "black", alpha = 0.3) +
scale_x_continuous(limits = c(-130, -55)) +
scale_y_continuous(limits = c(20, 55)) +
scale_size_continuous(range = c(1,15)) +
coord_fixed(1.3) +
ggtitle(questions$quest[2]) +
guides(size = FALSE) +
labs(fill = "Answer")
ggplot(qa51) +
geom_polygon(data = states, aes(x = long, y = lat), fill = "white", color = "black") +
geom_point(aes(x = Longitude, y = Latitude, fill = ans,
size = Responses), shape = 21,
color = "black", alpha = 0.3) +
scale_x_continuous(limits = c(-130, -55)) +
scale_y_continuous(limits = c(20, 55)) +
scale_size_continuous(range = c(1,15)) +
coord_fixed(1.3) +
ggtitle(questions$quest[2]) +
guides(size = FALSE) +
labs(fill = "Answer")
ggplot(qa51) +
geom_polygon(data = states, aes(x = long, y = lat, group = group),
fill = "white", color = "black") +
geom_point(aes(x = Longitude, y = Latitude, fill = ans,
size = Responses), shape = 21,
color = "black", alpha = 0.3) +
scale_x_continuous(limits = c(-130, -55)) +
scale_y_continuous(limits = c(20, 55)) +
scale_size_continuous(range = c(1,15)) +
coord_fixed(1.3) +
ggtitle(questions$quest[2]) +
guides(size = FALSE) +
labs(fill = "Answer")
ggplot(qa50) +
geom_polygon(data = states, aes(x = long, y = lat, group = group),
fill = "white", color = "black") +
geom_point(aes(x = Longitude, y = Latitude, fill = ans,
size = Responses), shape = 21,
color = "black", alpha = 0.3) +
scale_x_continuous(limits = c(-130, -55)) +
scale_y_continuous(limits = c(20, 55)) +
scale_size_continuous(range = c(1,15)) +
coord_fixed(1.3) +
ggtitle(wrap_120(questions$quest[1])) +
guides(size = FALSE) +
labs(fill = "Answer")
ggplot(qa51) +
geom_polygon(data = states, aes(x = long, y = lat, group = group),
fill = "white", color = "black") +
geom_point(aes(x = Longitude, y = Latitude, fill = ans,
size = Responses), shape = 21,
color = "black", alpha = 0.3) +
scale_x_continuous(limits = c(-130, -55)) +
scale_y_continuous(limits = c(20, 55)) +
scale_size_continuous(range = c(1,15)) +
coord_fixed(1.3) +
ggtitle(wrap_120(questions$quest[2])) +
guides(size = FALSE) +
labs(fill = "Answer")
