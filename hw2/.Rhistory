View(flights)
num_rows <-c(nrow(flights))
num_rows
num_vars <-c(19)
num_vars
View(flights)
longest_dep_delay <-c flights$dep_delay[max(flights$dep_delay)]
longest_dep_delay < -c flights$dep_delay[max(flights$dep_delay)]
longest_dep_delay < -c flights$dep_delay[max(flights$dep_delay)]
longest_dep_delay < -c (flights$dep_delay[max(flights$dep_delay)])
longest_dep_delay <- c(flights$dep_delay[max(flights$dep_delay)])
longest_dep_delay
longest_dep_delay
View(flights)
longest_dep_delay
longest_dep_delay <- flights$dep_delay[max(flights$dep_delay)]
longest_dep_delay
longest_dep_delay <- flights$tailnum[max(flights$dep_delay)]
longest_dep_delay
longest_dep_delay <- max(flights$dep_delay)
longest_dep_delay
View(flights)
?sort
?max
longest_dep_delay <- max(flights$dep_delay, na.rm=FALSE)
longest_dep_delay
longest_dep_delay <- max(flights$dep_delay, na.rm=TRUE)
longest_dep_delay
View(flights)
x <-flights$carrier[carrier==UA]
x <-flights$carrier==UA
View(flights)
View(flights)
x <- flights$carrier==UA
subset(flights, carrier==UA)
subset(flights, flights$carrier==UA)
?subset
subset(flights,carrier=="UA")
x <-c(subset(flights,carrier=="UA"))
sort(x$dep_delay,decreasing=TRUE)
?seq
ua_delay <- mean(x$dep_delay)
ua_delay
ua_delay <- mean(x$dep_delay, na.rm=TRUE)
ua_delay
?order
View(flights)
2+5
data.frame(x=c(1,2,3))
```{r cars, echo=FALSE}
15. Select the `bestuse` column of `tents` in four different ways: using `$`, `[[]]`, position number and `[]`, and variable name and `[]`.
so_cheap_tents
tents
tents <- read.csv("D:/test/stat133-su2016/03-lesson/lab/tents.csv")
View(tents)
so_cheap_tents <-subset(tents,pirce<300)
so_cheap_tents <-subset(tents,price<300)
so_cheap_tents
sum(so_cheap_tents$price<300.00)
sum(so_cheap_tents$brand==big-agnes)
sum(so_cheap_tents$brand=="big-agnes")
View(tents)
View(tents)
View(tents)
tents$name[max(x)]
x <-(tents$height/tents$weight)
tents$name[max(x)]
View(tents)
View(tents)
View(tents)
?merge
?aggregate
View(flights)
install("stringr")
install.packages("stringr")
library(stringr)
?str_sub
library(stringr)
help(package="stringr")
str_count(words)
str_count(words)
str_count(,words)
words <- "aaeeiioouuu"
str_count(,words)
str_count(words,"a","e","i","o","u")
str_count(words,c("a","e","i","o","u"))
str_pad("a", width = 4, side = "left", pad = "x")
str_pad("a", width = 3, side = "left")
str_pad(c("a", "abc", "abcdef"), 10)
str_pad("a", c(5, 10, 20))
str_pad("a", 10, pad = c("-", "_", " "))
countries <- flags$name
data(flags)
flags <- read_csv("flags.csv")
str_replace_all(countries,"-"," ")
countries <- flags$name
str_replace_all(countries,"-"," ")
library(readr)
str_replace_all(countries,"-"," ")
str_replace_all("countries","-"," ")
countries
?str_subset
^[AEIOU].*[^aeiouAEIOU]
str_subset(countries,"^[AEIOU].*[^aeiouAEIOU]")
flags <- read_csv("flags.csv")
countries <- flags$name
?str_detect
str_extract_all(x, "[0-9]{ ,3}")
library(stringr)
str_extract_all(x, "[0-9]{ ,3}")
str_extract_all(x, "[0-9]{0,3}")
str_extract_all(x, "[0-9]{,3}")
str_extract_all(x, "[0-9]{,3}")
str_extract_all(x, "[0-9]{,3}")
str_extract_all(x, "[0,9]{,3}")
str_extract_all(x, "[0,9]")
library(stringr)
library(stringr)
x <- "Numbers 123 133 1202"
str_extract_all(x, "[0,9]")
str_extract_all(x, "[0,9]{3}")
str_extract_all(x, "[0-9]{3}")
str_extract_all(x, "[0-9]{,3}")
str_extract_all(x, "[0-3]$")
x <- "123 133 1202"
str_extract_all(x, "[0-3]$")
str_extract_all(x, "[1-3]$")
str_extract_all(x, "^[1-3]")
str_extract_all(x, "[1-3]")
str_extract_all(x, "[0-3]$")
str_extract_all(x, "[0-5]$")
str_extract_all(x, ".[0-3]$")
str_extract_all(x, "[1][2-3]([0-3])$")
str_extract_all(x, "[1][2-3]([0-3] )$")
str_extract_all(x, "[1][2]([0-3] )$")
str_extract_all(x, "[1][2][3]$")
str_extract_all(x, "[1][2][3]")
str_extract_all(x, "[1][2-3][0-3]")
str_extract_all(x, "[1][2-3][0-3] $")
str_extract_all(x, "[1][2-3][0-3]$")
str_extract_all(x, "[0-3]$")
str_extract_all(x, ".*[0-3]$")
x <- "121 133 1202"
str_extract_all(x, ".*[1-3]$")
str_extract_all(x, ".*[2-3]$")
str_extract_all(x, "[0-9]{2}[2-3]$")
str_extract_all(x, "[0-9]{2}[2-3]$")
str_extract_all(x, "[0-9]{2}[2-3] $")
str_extract_all(x, "[0-9]{2,3}[0-3] $")
str_extract_all(x, "[0-9]{2,3}[0-3]$")
str_extract_all(x, "[0-9]{2,3}[0-3] ?$")
str_extract_all(x, "[0-9]{2,3}[0-3] ")
str_extract_all(x, "[0-9]{2,3}[0-3]$ ")
str_extract_all(x, "([0-9]{2,3}[0-3])$ ")
str_extract_all(x, "[0-9]{2,3}[0-3]$")
x <- "1211331202"
str_extract_all(x, "[0-9]{2,3}[0-3]$")
str_extract_all(x, "[0-9]{2,3}[0-3]")
x <- c("Lebron","James")
str_extract_all(x,("bron"))
str_extract_all(x,.*("bron"))
str_extract_all(x,".*(bron)")
str_extract_all(x,".*(bron)")
str_detect(x,".*(bron)")
x <- "Lebron James"
str_detect(x,".*(bron)")
str_extract_all(x,".*(bron)")
str_extract_all(x,"(bron)")
box_score <- c("41/16/7","41/3/6","2/3/1","10/2/1","6,15/0","8/1/0")
box_score <- c("41/16/7","41/3/6","2/3/1","10/2/1","6,15/0","8/1/0")
str_detect(box_score,"[5][0-9]/[0-1]?[0-9]/[0-1]?[0-9]")
str_detect(box_score,"[0-1]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9]")
box_score <- c("41/16/7","41/3/6","2/3/1","10/2/1","6/15/0","8/1/0")
str_detect(box_score,"[0-1]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9]")
str_extract(box_score,player_stats)
player_stats <- str_detect(box_score,"[0-1]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9]")
str_extract(box_score,player_stats)
player_stats <- "[0-1]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9]"
str_extract(box_score,player_stats)
player_stats <- "[0-4]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9]"
str_extract(box_score,player_stats)
player_stats <- "[0-4]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9]"
str_extract(box_score,player_stats)
player_stats <- "[0-4]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9]"
str_extract(box_score,player_stats)
player_stats <- "[0-4]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9],"
str_extract(box_score,player_stats)
box_score <- "41/16/7,41/3/6,2/3/1,10/2/1,6/15/0,8/1/0
player_stats <- "[0-4]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9]"
box_score <- "41/16/7,41/3/6,2/3/1,10/2/1,6/15/0,8/1/0"
player_stats <- "[0-4]?[0-9]/[0-1]?[0-9]/[0-1]?[0-9]"
str_extract(box_score,player_stats)
str_extract_all(box_score,"[4][0-9]")
str_extract_all(box_score,"[4][0-9]/[1]?[0-9]/[1]?[0-9]")
str_extrac_all(box_score,"[^4][0-9]/[1][0-9]/[0-1][0-9]")
library(stringr)
str_extrac_all(box_score,"[^4][0-9]/[1][0-9]/[0-1][0-9]")
str_extract_all(box_score,"[^4][0-9]/[1][0-9]/[0-1][0-9]")
str_extract_all(box_score,"[^4]?[0-9]/[1][0-9]/[0-1][0-9]")
str_extract_all(box_score,"[0-9]/[1][0-9]/[0-1][0-9]")
str_extract_all(box_score,"[0-9]/[0-1][0-9]/[0-1][0-9]")
str_extract_all(box_score,"[0-9]/[0-1][0-9]/[0-1]?[0-9]")
str_extract_all(box_score,"[^4]?[0-9]/[0-1][0-9]/[0-1]?[0-9]")
str_extract_all(box_score,"[^4][0-9]?/[0-1][0-9]/[0-1]?[0-9]")
str_extract_all(box_score,"[^4],?[0-9]/[0-1][0-9]/[0-1]?[0-9]")
str_extract_all(box_score,"[^4]?,[0-9]/[0-1][0-9]/[0-1]?[0-9]")
str_extract_all(box_score,"[^4]?[,][0-9]/[0-1][0-9]/[0-1]?[0-9]")
str_extract_all(box_score,"[^4]?[0-1][0-9]/[0-1][0-9]/[0-1]?[0-9]")
str_extract_all(box_score,"[^4]?,[0-9]/[0-1][0-9]/[0-1]?[0-9]")
x <- "BBCDEF"
str_sub(x, 1, 1) <- "A"; x
str_sub(x, -1, -1) <- "K"; x
str_sub(x, -2, -2) <- "GHIJ"; x
str_sub(x, 2, -2) <- ""; x
library(stringr)
x <- "BBCDEF"
str_sub(x, 1, 1) <- "A"; x
str_sub(x, -1, -1) <- "K"; x
str_sub(x, -2, -2) <- "GHIJ"; x
str_sub(x, 2, -2) <- ""; x
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]", "-")
remove_tag <- function(tag){
str_replace_all(tag,"<.*>",""
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum<\genus>",
"<kingdom>Plantae<\kingdom>"
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
remove_tag <- function(tag){
str_replace_all(tag,"<.*>","")
}
remove_tag(phylo)
remove_tag <- function(tag){
str_replace_all(tag,"^<.*>$","")
remove_tag(phylo)
remove_tag(phylo)
remove_tag <- function(tag){
x <- str_replace_all(tag,"^<.*>$","")
x
}
remove_tag(phylo)
remove_tag(phylo)
remove_tag <- function(tag){
str_replace_all(tag,"<.*>","")
}
remove_tag(phylo)
remove_tag(phylo)
remove_tag <- function(tag){
str_replace_all(tag,"<.*>"," ")
}
remove_tag(phylo)
phylo
phylo
length(phylo)
length(phylo)
x <- length(phylo)
x
x
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]", "-")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]", "-")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]", "-")
library(stringr)
x <- 1:3
library(stringr)
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]", "-")
names(fruits)[1] <- "oneapple"
fruits
df <- data.frame("a"=c(99,1,2,4,3),"b"=c(1,1,0,1,0),"c"=c(5,5,10,99,5))
df
Fix99 <- function(df) {
x <- seq(1,ncol(df), by=2)
for(odd in x){
if(df[odd,1:nrows(df)]==99) {
df[odd,1:nrows(df)] <- NA
}
}
return(df)
}
Fix99(df)
Fix99 <- function(df) {
x <- seq(1,ncol(df), by=2)
for(odd in x){
if(df[odd,1:nrow(df)]==99) {
df[odd,1:nrow(df)] <- NA
}
}
return(df)
}
Fix99(df)
Fix99 <- function(data) {
x <- seq(1,ncol(data), by=2)
for(odd in x){
if(df[odd,1:nrow(data)]==99) {
data[odd,1:nrow(data)] <- NA
}
}
return(df)
}
}
Spooky <- function(n){
for(n in 1:3) {
print(n,"spooky",(n+2),"me")
}
}
Spooky(3)
library(stringr)
Spooky <- function(n){
for(n in 1:3) {
print(str_c(n,"spooky",(n+2),"me"))
}
}
Spooky(3)
?sample
FlipTilHeads <- function(n,prob=0.5){
x <- sample(1:2,n,replace=T,prob)
counter <- 0
while(x!=0){
counter <- counter +1
}
}
FlipTilHeads(100)
FlipTilHeads <- function(n,prob=0.5){
x <- sample(1:2,n,replace=T,prob=0.5)
counter <- 0
while(x!=0){
counter <- counter +1
}
}
FlipTilHeads(100)
CFracToDec <- function(x){
for(n in 1:length(x)){
x[n-1]+(1/x[n])
}
}
CFracToDec(c(3, 4, 12, 4))
CFracToDec <- function(x){
for(n in 1:length(x)){
return(x[n-1]+(1/x[n]))
}
}
CFracToDec(c(3, 4, 12, 4))
CFracToDec <- function(x){
for(n in 1:length(x)){
return(x[n]+(1/x[n]))
}
}
CFracToDec(c(3, 4, 12, 4))
CFracToDec <- function(x){
for(n in 1:length(x)){
return(x[n]+(1/x[n+1]))
}
}
CFracToDec(c(3, 4, 12, 4))
CFracToDec(c(3,7,15,1,292,1,1,1,2,1,3,1))
CFracToDec(c(2,1,2,1,1,4,1,1,6,1,1,8))
CFracToDec <- function(x){
for(n in 1:length(x)){
return(x[n-1]+(1/x[n+1]))
}
}
CFracToDec(c(3, 4, 12, 4)) # 3.245
CFracToDec(c(3,7,15,1,292,1,1,1,2,1,3,1)) # 3.141593
CFracToDec(c(2,1,2,1,1,4,1,1,6,1,1,8)) # 2.718282
CFracToDec <- function(x){
for(n in 1:length(x)){
return(x[n]+(1/(x[n]+x[n+1]]))
}
}
CFracToDec <- function(x){
for(n in 1:length(x)){
return(x[n]+(1/(x[n]+x[n+1]])))
}
}
CFracToDec <- function(x){
for(n in 1:length(x)){
return(x[n]+(1/(x[n]+x[n+1])))
}
}
CFracToDec(c(2,1,2,1,1,4,1,1,6,1,1,8))
CFracToDec <- function(x){
rev(x)
for(n in 1:length(x)){
return(x[n]+(1/(x[n]+x[n+1])))
}
}
CFracToDec(c(3, 4, 12, 4))
CFracToDec <- function(x){
rev(x)
a=0
for(n in 1:length(x)){
a = a+(x[n]+(1/(x[n]+x[n+1])))
}
}
CFracToDec(c(3, 4, 12, 4))
CFracToDec <- function(x){
rev(x)
a=0
for(n in 1:length(x)){
a = a+(x[n]+(1/(x[n]+x[n+1])))
}
return(a)
}
CFracToDec(c(3, 4, 12, 4))
a = a+(x[n]+(1/(x[n]+x[n+1])))
CFracToDec <- function(x){
rev(x)
a=0
for(n in 1:length(x)){
a = a+(x[n]+(1/(x[n+1]+x[n+2])))
}
}
CFracToDec(c(3, 4, 12, 4))
CFracToDec <- function(x){
rev(x)
a=0
for(n in 1:length(x)){
a = a+(x[n]+(1/(x[n+1]+x[n+2])))
}
return(a)
}
Hailstone <- function(n){
if(n %% 2 ==0){
counter <- 0
while(n %% 2 == 0){
n <- n/2
counter <- counter+1
while(n %% 2 !=0){
n <- (3*n)+1
counter <-counter +1
}
}
} else {
counter <- 0
while(n %% 2 !=0){
n <- (3*n)+1
counter <- counter + 1
while(n %% 2 == 0){
n <- n/2
counter <- counter+1
}
}
}
}
Hailstone(1)
codons
library(readr)
setwd("../../stat133-su2016/hw2")
getwd()
read_csv("codons")
library(readr)
setwd("../../stat133-su2016/hw2")
getwd()
getwd()
getwd()
setwd("../D:/Statistics133/hw2")
setwd("D:/Statistics133/hw2")
library(readr)
codons <- read_csv("codons")
library(stringr)
amino <- codons[["amino_acid"]]
dna <- codons[["dna_triplet"]]
dna <- as.character(dna)
amino <- as.character(amino)
dna_to_aa <- function(x){
if(str_detect(x,"^[CGAT]+$")){
a <- amino
names(a) <- dna
y <- substring(x,seq(1,nchar(x),3),seq(3,nchar(x),3))
s <- str_replace_all(y,a,amino[which((dna %in% y) )])
s <- str_c(s,sep="",collapse="")
s
} else {
"Invalid DNA sequence"
}
}
w <- c(a,[^CGAT])
w <- c(a,"[^CGAT]")
a
dna_to_aa("GAGCCATGCATT")
a <- amino
names(a) <- dna
w <- c(a,"[^CGAT]")
z <-c(amino[which((dna %in% y) )], "Invalid DNA sequence")
y <- substring(x,seq(1,nchar(x),3),seq(3,nchar(x),3))
x <- "GAGCCATGCATT"
y <- substring(x,seq(1,nchar(x),3),seq(3,nchar(x),3))
z <-c(amino[which((dna %in% y) )], "Invalid DNA sequence")
dna_to_aa <- function(x){
if(str_detect(x,"^[CGAT]+$")){
a <- amino
names(a) <- dna
y <- substring(x,seq(1,nchar(x),3),seq(3,nchar(x),3))
s <- str_replace_all(y,a,amino[which((dna %in% y) )])
s <- str_c(s,sep="",collapse="")
s
} else {
"Invalid DNA sequence"
}
}
dna_to_aa("GAGCCATGCATT")
