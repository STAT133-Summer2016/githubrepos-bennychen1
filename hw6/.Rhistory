return("Winner")
} else {
return("Lose")
}
} else {
if(select == car) {
return("Winner")
} else {
return("Loser")
}
}
}
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[doors != car & doors != select]
monty_open <- sample(to_open, k)
if(switch == T) {
swtich_choice <- sample(doors[doors != select & doors != monty_open])
if(switch_choice == car) {
return("Winner")
} else {
return("Lose")
}
} else {
if(select == car) {
return("Winner")
} else {
return("Loser")
}
}
}
simMH(3)
simMH(3, 1, switch = TRUE)
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[doors != car & doors != select]
monty_open <- sample(to_open, k)
if(switch == T) {
swtich_choice <- sample(doors[doors != select & doors != monty_open], 1)
if(switch_choice == car) {
return("Winner")
} else {
return("Lose")
}
} else {
if(select == car) {
return("Winner")
} else {
return("Loser")
}
}
}
simMH(3, 1, switch = TRUE)
doors <- 1:10
doors[doors != 1 & doors != 2]
sample(doors[doors != 1 & doors != 2],1)
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[doors != car & doors != select]
monty_open <- sample(to_open, k)
if(switch == T) {
switch_choice <- sample(doors[doors != select & doors != monty_open], 1)
if(switch_choice == car) {
return("Winner")
} else {
return("Lose")
}
} else {
if(select == car) {
return("Winner")
} else {
return("Loser")
}
}
}
simMH(3, 1, switch = TRUE)
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[doors != car & doors != select]
monty_open <- sample(to_open, k)
winner <- T
if(switch == T) {
switch_choice <- sample(doors[doors != select & doors != monty_open], 1)
if(switch_choice == car) {
return(winner)
} else {
return("Lose")
}
} else {
if(select == car) {
return(winner)
} else {
return("Loser")
}
}
}
x <- replicate(10000, simMH(3, 1, switch = TRUE))
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[doors != car & doors != select]
monty_open <- sample(to_open, k)
winner <- T
lose <- F
if(switch == T) {
switch_choice <- sample(doors[doors != select & doors != monty_open], 1)
if(switch_choice == car) {
return(winner)
} else {
return(lose)
}
} else {
if(select == car) {
return(winner)
} else {
return(lose)
}
}
}
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
x <- replicate(10000, simMH(100, 98, switch = TRUE))
sum(x)/length(x)
warnings()
doors <- 1:10
doors[-1,-2]
doors[-1]
doors[-1 & -2]
doors[-5]
doors[-c(1,2)]
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[doors != car & doors != select]
monty_open <- sample(to_open, k)
winner <- T
lose <- F
if(switch == T) {
switch_choice <- sample(doors[-c(select, monty_open)], 1)
if(switch_choice == car) {
return(winner)
} else {
return(lose)
}
} else {
if(select == car) {
return(winner)
} else {
return(lose)
}
}
}
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
x <- replicate(10000, simMH(100, 98, switch = TRUE))
sum(x)/length(x)
doors[doors != 1 & doors != 2]
new_sample <- function(n, k) {
if(length(n) == 1) {
return(x)
} else {
sample(new_sample, k)
}
}
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[-c(car, select)]
monty_open <- sample(to_open, k)
winner <- T
lose <- F
if(switch == T) {
switch_choice <- new_sample(doors[-c(select, monty_open)], 1)
if(switch_choice == car) {
return(winner)
} else {
return(lose)
}
} else {
if(select == car) {
return(winner)
} else {
return(lose)
}
}
}
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[-c(car, select)]
monty_open <- sample(to_open, k)
winner <- T
lose <- F
if(switch == T) {
switch_choice <- new_sample(n = doors[-c(select, monty_open)], k = 1)
if(switch_choice == car) {
return(winner)
} else {
return(lose)
}
} else {
if(select == car) {
return(winner)
} else {
return(lose)
}
}
}
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
new_sample <- function(n, k) {
if(length(n) == 1) {
return(n)
} else {
sample(new_sample, k)
}
}
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[-c(car, select)]
monty_open <- sample(to_open, k)
winner <- T
lose <- F
if(switch == T) {
switch_choice <- new_sample(n = doors[-c(select, monty_open)], k = 1)
if(switch_choice == car) {
return(winner)
} else {
return(lose)
}
} else {
if(select == car) {
return(winner)
} else {
return(lose)
}
}
}
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
new_sample <- function(n, k) {
if(length(n) == 1) {
return(n)
} else {
sample(n, k)
}
}
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[-c(car, select)]
monty_open <- sample(to_open, k)
winner <- T
lose <- F
if(switch == T) {
switch_choice <- new_sample(n = doors[-c(select, monty_open)], k = 1)
if(switch_choice == car) {
return(winner)
} else {
return(lose)
}
} else {
if(select == car) {
return(winner)
} else {
return(lose)
}
}
}
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
x <- replicate(10000, simMH(100, 98, switch = TRUE))
sum(x)/length(x)
x <- replicate(10000, simMH(4, 1, switch = TRUE))
sum(x)/length(x)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[-c(car, select)]
monty_open <- sample(to_open, k)
win <- T
lose <- F
if(switch == T) {
switch_choice <- new_sample(n = doors[-c(select, monty_open)], k = 1)
if(switch_choice == car) {
win <- T
} else {
win <- F
}
} else {
if(select == car) {
win <- T
} else {
win <- F
}
}
}
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
x <- replicate(10000, simMH(100, 98, switch = TRUE))
sum(x)/length(x)
x <- replicate(10000, simMH(4, 1, switch = TRUE))
sum(x)/length(x)
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
cleaned_demographics = read_csv("cleaned_demographics.csv")
View(cleaned_demographics)
?add_tooltip
country_data %>%
shiny::runApp('HW6Bonus')
runApp('HW6Bonus')
runApp('HW6Bonus')
runApp('HW6Bonus')
runApp('HW6Bonus')
cleaned_demographics$Country
runApp('HW6Bonus')
runApp('HW6Bonus')
simMH <- function(n, k, switch) {
doors <- 1:n
car <- sample(1:n, 1)
select <- sample(1:n, 1)
to_open <- doors[-c(car, select)]
monty_open <- new_sample(to_open, k)
win <- T
lose <- F
if(switch == T) {
switch_choice <- new_sample(n = doors[-c(select, monty_open)], k = 1)
if(switch_choice == car) {
win <- T
} else {
win <- F
}
} else {
if(select == car) {
win <- T
} else {
win <- F
}
}
}
set.seed(12345)
x <- replicate(10000, simMH(3, 1, switch = TRUE))
sum(x)/length(x)
x <- replicate(10000, simMH(100, 98, switch = TRUE))
sum(x)/length(x)
x <- replicate(10000, simMH(4, 1, switch = TRUE))
sum(x)/length(x)
sample((1,2), 10)
sample(c(1,2), 10)
x <- 1:10
y <- 1:10
sample(c(x,y), 10)
x <- runif(10, -1, 1)
y <- runif(10, -1, 1)
points <- replicate(10, sample(x, 2, replace = T))
points
x <- runif(10, -1, 1)
y <- runif(10, -1, 1)
points <- rep(10, sample(x, 2, replace = T))
?rep
x <- runif(10, -1, 1)
y <- runif(10, -1, 1)
points <- rep(sample(x, 2, replace = T), 10)
points
estimatePi <- function(n) {
x <- runif(n, -1, 1)
x_squared <- x ^2
y <- runif(n, -1, 1)
y_squared <- y ^ 2
points <- replicate(n, sample(x_squared, 2, replace = T))
}
estimatePi(10)
estimatePi <- function(n) {
x <- runif(n, -1, 1)
x_squared <- x ^2
y <- runif(n, -1, 1)
y_squared <- y ^ 2
points <- replicate(n, sample(x_squared, 2, replace = T))
return(points)
}
estimatePi(10)
cbind(points)
rbind(points)
points <- sample(x_squared, 2, replace = T))
points <- sample(x_squared, 2, replace = T)
x <- runif(n, -1, 1)
x_squared <- x ^2
points <- sample(x, 2, replace = T)
points <- sample(x, 2, replace = T)
points
estimatePi <- function(n) {
x <- runif(n, -1, 1)
x_squared <- x ^2
points <- sample(x_squared, 2, replace = T)
if(points[1] + points[2] <= 1) {
pi_hat <- 4 * (points[1] + points[2]) / n
return(pi_hat)
}
}
set.seed(456123)
estimatePi(100000)
estimatePi <- function(n) {
x <- runif(n, -1, 1)
x_squared <- x ^2
points <- sample(x_squared, 2, replace = T)
if(points[1] + points[2] <= 1) {
pi_hat <- 4 * (points[1] + points[2]) / n
}
return(pi_hat)
}
set.seed(456123)
estimatePi(100000)
estimatePi <- function(n) {
x <- runif(n, -1, 1)
x_squared <- x ^2
points <- sample(x_squared, 2, replace = T)
if(points[1] + points[2] <= 1) {
pi_hat <- 4 * (points[1] + points[2]) / n
}
return(pi_hat)
}
estimatePi(100)
estimatePi <- function(num.points) {
x <- runif(num.points, -1, 1)
y <- runif(num.points, -1, 1)
i = 0
for(i in 1:num.points) {
x[i] <- sample(x, 1)
y[i] <- sample(y, 1)
if(x[i]^2 + y[i]^2 <= 1) {
i <- i + 1
}
}
}
estimatePi <- function(num.points) {
x <- runif(num.points, -1, 1)
y <- runif(num.points, -1, 1)
i = 0
for(i in 1:num.points) {
x[i] <- sample(x, 1)
y[i] <- sample(y, 1)
if(x[i]^2 + y[i]^2 <= 1) {
i <- i + 1
}
}
pi_hat <- 4 * i / num.points
return(pi_hat)
}
set.seed(456123)
estimatePi(100000)
estimatePi(100)
estimatePi(1000)
estimatePi(10000)
estimatePi <- function(num.points) {
x <- runif(num.points)
y <- runif(num.points)
return(y)
}
estimatePi(10)
estimatePi <- function(num.points) {
x <- runif(num.points)
y <- runif(num.points)
in_circle <- ifelse(x ^ 2 + y ^2 <=1, T, F)
pi_hat <- 4 * sum(in_circle) / num.points
return(pi_hat)
}
set.seed(456123)
estimatePi(100000)
runApp('HW6Bonus')
cleaned_demographics$Country
runApp('HW6Bonus')
runApp('HW6Bonus')
runApp('HW6Bonus')
runApp('HW6Bonus')
runApp('HW6Bonus')
?bind_shiny
library(rsconnect)
